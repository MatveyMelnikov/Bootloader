ARM GAS  /tmp/ccjdN8fC.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB71:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdint.h>
  25:Core/Src/main.c **** #include <stdbool.h>
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include "bootloader_cmd.h"
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  /tmp/ccjdN8fC.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PD */
  37:Core/Src/main.c **** //#define APP_START_ADDRESS 0x08002C00 /* page 10 */
  38:Core/Src/main.c **** #define APP_START_ADDRESS 0x08000000 + (0x400 * 10) /* page 10 */
  39:Core/Src/main.c **** #define SRAM_SIZE 20 * 1024
  40:Core/Src/main.c **** #define SRAM_END (SRAM_BASE + SRAM_SIZE)
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** UART_HandleTypeDef huart1;
  50:Core/Src/main.c **** UART_HandleTypeDef* bootloader_uart = &huart1;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** extern uint32_t _sidata; // .data in flash (VMA)
  54:Core/Src/main.c **** extern uint32_t _sdata; // start of .data (initialize vars) in flash
  55:Core/Src/main.c **** extern uint32_t _edata;
  56:Core/Src/main.c **** extern uint32_t _sbss; // start of .bss (not initialize vars) in SRAM
  57:Core/Src/main.c **** extern uint32_t _ebss;
  58:Core/Src/main.c **** /* USER CODE END PV */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  61:Core/Src/main.c **** void SystemClock_Config(void);
  62:Core/Src/main.c **** static void MX_GPIO_Init(void);
  63:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  64:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  65:Core/Src/main.c **** void _bootloader_start(void);
  66:Core/Src/main.c **** int main(void);
  67:Core/Src/main.c **** void SysTick_Handler(void);
  68:Core/Src/main.c **** void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin);
  69:Core/Src/main.c **** static void led_blink(void);
  70:Core/Src/main.c **** static void gpio_deinit(void);
  71:Core/Src/main.c **** static void start_application_code(void);
  72:Core/Src/main.c **** /* USER CODE END PFP */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  75:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** // Minimal vector table
  78:Core/Src/main.c **** uint32_t *vector_table[] __attribute__((section(".isr_vector"))) = {
  79:Core/Src/main.c ****   (uint32_t *) SRAM_END, // initial stack pointer
  80:Core/Src/main.c ****   (uint32_t *) _bootloader_start,
  81:Core/Src/main.c ****   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  82:Core/Src/main.c ****   (uint32_t *)SysTick_Handler 
  83:Core/Src/main.c **** };
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** __attribute__((always_inline))
  86:Core/Src/main.c **** inline static void __initialize_data(
  87:Core/Src/main.c ****     uint32_t* flash_begin,
  88:Core/Src/main.c ****     uint32_t* data_begin,
  89:Core/Src/main.c ****     uint32_t* data_end
  90:Core/Src/main.c **** ) {
ARM GAS  /tmp/ccjdN8fC.s 			page 3


  91:Core/Src/main.c ****     uint32_t *p = data_begin;
  92:Core/Src/main.c ****     while (p < data_end)
  93:Core/Src/main.c ****         *p++ = *flash_begin++;
  94:Core/Src/main.c **** }
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** __attribute__((always_inline))
  97:Core/Src/main.c **** inline static void __initialize_bss(
  98:Core/Src/main.c ****     uint32_t* bss_begin,
  99:Core/Src/main.c ****     uint32_t* bss_end
 100:Core/Src/main.c **** ) {
 101:Core/Src/main.c ****     uint32_t *p = bss_begin;
 102:Core/Src/main.c ****     while (p < bss_end)
 103:Core/Src/main.c ****         *p++ = 0;
 104:Core/Src/main.c **** }
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** __attribute__((noreturn,weak))
 107:Core/Src/main.c **** void _bootloader_start(void)
 108:Core/Src/main.c **** {
 109:Core/Src/main.c ****     __initialize_data(&_sidata, &_sdata, &_edata);
 110:Core/Src/main.c ****     __initialize_bss(&_sbss, &_ebss);
 111:Core/Src/main.c ****     main();
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****     for(;;);
 114:Core/Src/main.c **** }
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** /* USER CODE END 0 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** /**
 119:Core/Src/main.c ****   * @brief  The application entry point.
 120:Core/Src/main.c ****   * @retval int
 121:Core/Src/main.c ****   */
 122:Core/Src/main.c **** int main(void)
 123:Core/Src/main.c **** {
 124:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END 1 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 131:Core/Src/main.c ****   HAL_Init();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* USER CODE END Init */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* Configure the system clock */
 138:Core/Src/main.c ****   SystemClock_Config();
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* USER CODE END SysInit */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* Initialize all configured peripherals */
 145:Core/Src/main.c ****   MX_GPIO_Init();
 146:Core/Src/main.c ****   uint32_t current_ticks = HAL_GetTick();
 147:Core/Src/main.c **** 
ARM GAS  /tmp/ccjdN8fC.s 			page 4


 148:Core/Src/main.c ****   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET)
 149:Core/Src/main.c ****   {
 150:Core/Src/main.c ****     MX_USART1_UART_Init();
 151:Core/Src/main.c ****     bootloader_start_output();
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****     while (true)
 154:Core/Src/main.c ****     {
 155:Core/Src/main.c ****       led_blink();
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****       if ((HAL_GetTick() - current_ticks) < UART_DELAY)
 158:Core/Src/main.c ****         continue;
 159:Core/Src/main.c ****       if (bootloader_proccess_input() == BOOTLOADER_TIMEOUT)
 160:Core/Src/main.c ****         continue;
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****       current_ticks = HAL_GetTick();
 163:Core/Src/main.c ****     }
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c ****   else
 166:Core/Src/main.c ****   {
 167:Core/Src/main.c ****     start_application_code();
 168:Core/Src/main.c ****   }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE END 2 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* Infinite loop */
 173:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 174:Core/Src/main.c ****   // while (1)
 175:Core/Src/main.c ****   // {
 176:Core/Src/main.c ****     /* USER CODE END WHILE */
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 179:Core/Src/main.c ****   // }
 180:Core/Src/main.c ****   /* USER CODE END 3 */
 181:Core/Src/main.c **** }
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /**
 184:Core/Src/main.c ****   * @brief System Clock Configuration
 185:Core/Src/main.c ****   * @retval None
 186:Core/Src/main.c ****   */
 187:Core/Src/main.c **** void SystemClock_Config(void)
 188:Core/Src/main.c **** {
 189:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 190:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 193:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 196:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 197:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 199:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 200:Core/Src/main.c ****   {
 201:Core/Src/main.c ****     Error_Handler();
 202:Core/Src/main.c ****   }
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
ARM GAS  /tmp/ccjdN8fC.s 			page 5


 205:Core/Src/main.c ****   */
 206:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 207:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 208:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 209:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 210:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 211:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 214:Core/Src/main.c ****   {
 215:Core/Src/main.c ****     Error_Handler();
 216:Core/Src/main.c ****   }
 217:Core/Src/main.c **** }
 218:Core/Src/main.c **** 
 219:Core/Src/main.c **** /**
 220:Core/Src/main.c ****   * @brief USART1 Initialization Function
 221:Core/Src/main.c ****   * @param None
 222:Core/Src/main.c ****   * @retval None
 223:Core/Src/main.c ****   */
 224:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 225:Core/Src/main.c **** {
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 234:Core/Src/main.c ****   huart1.Instance = USART1;
 235:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 236:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 237:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 238:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 239:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 240:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 241:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 242:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 243:Core/Src/main.c ****   {
 244:Core/Src/main.c ****     Error_Handler();
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c **** }
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /**
 253:Core/Src/main.c ****   * @brief GPIO Initialization Function
 254:Core/Src/main.c ****   * @param None
 255:Core/Src/main.c ****   * @retval None
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c **** static void MX_GPIO_Init(void)
 258:Core/Src/main.c **** {
  26              		.loc 1 258 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/ccjdN8fC.s 			page 6


  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  37 0002 88B0     		sub	sp, sp, #32
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 48
 259:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 259 3 view .LVU1
  41              		.loc 1 259 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0494     		str	r4, [sp, #16]
  44 0008 0594     		str	r4, [sp, #20]
  45 000a 0694     		str	r4, [sp, #24]
  46 000c 0794     		str	r4, [sp, #28]
 260:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 261:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 264:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 264 3 is_stmt 1 view .LVU3
  48              	.LBB14:
  49              		.loc 1 264 3 view .LVU4
  50              		.loc 1 264 3 view .LVU5
  51 000e 1D4B     		ldr	r3, .L3
  52 0010 9A69     		ldr	r2, [r3, #24]
  53 0012 42F01002 		orr	r2, r2, #16
  54 0016 9A61     		str	r2, [r3, #24]
  55              		.loc 1 264 3 view .LVU6
  56 0018 9A69     		ldr	r2, [r3, #24]
  57 001a 02F01002 		and	r2, r2, #16
  58 001e 0192     		str	r2, [sp, #4]
  59              		.loc 1 264 3 view .LVU7
  60 0020 019A     		ldr	r2, [sp, #4]
  61              	.LBE14:
  62              		.loc 1 264 3 view .LVU8
 265:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  63              		.loc 1 265 3 view .LVU9
  64              	.LBB15:
  65              		.loc 1 265 3 view .LVU10
  66              		.loc 1 265 3 view .LVU11
  67 0022 9A69     		ldr	r2, [r3, #24]
  68 0024 42F00802 		orr	r2, r2, #8
  69 0028 9A61     		str	r2, [r3, #24]
  70              		.loc 1 265 3 view .LVU12
  71 002a 9A69     		ldr	r2, [r3, #24]
  72 002c 02F00802 		and	r2, r2, #8
  73 0030 0292     		str	r2, [sp, #8]
  74              		.loc 1 265 3 view .LVU13
  75 0032 029A     		ldr	r2, [sp, #8]
  76              	.LBE15:
  77              		.loc 1 265 3 view .LVU14
 266:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
ARM GAS  /tmp/ccjdN8fC.s 			page 7


  78              		.loc 1 266 3 view .LVU15
  79              	.LBB16:
  80              		.loc 1 266 3 view .LVU16
  81              		.loc 1 266 3 view .LVU17
  82 0034 9A69     		ldr	r2, [r3, #24]
  83 0036 42F00402 		orr	r2, r2, #4
  84 003a 9A61     		str	r2, [r3, #24]
  85              		.loc 1 266 3 view .LVU18
  86 003c 9B69     		ldr	r3, [r3, #24]
  87 003e 03F00403 		and	r3, r3, #4
  88 0042 0393     		str	r3, [sp, #12]
  89              		.loc 1 266 3 view .LVU19
  90 0044 039B     		ldr	r3, [sp, #12]
  91              	.LBE16:
  92              		.loc 1 266 3 view .LVU20
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 269:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  93              		.loc 1 269 3 view .LVU21
  94 0046 104E     		ldr	r6, .L3+4
  95 0048 2246     		mov	r2, r4
  96 004a 4FF40051 		mov	r1, #8192
  97 004e 3046     		mov	r0, r6
  98 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL0:
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 272:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 100              		.loc 1 272 3 view .LVU22
 101              		.loc 1 272 23 is_stmt 0 view .LVU23
 102 0054 4FF40053 		mov	r3, #8192
 103 0058 0493     		str	r3, [sp, #16]
 273:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 104              		.loc 1 273 3 is_stmt 1 view .LVU24
 105              		.loc 1 273 24 is_stmt 0 view .LVU25
 106 005a 0123     		movs	r3, #1
 107 005c 0593     		str	r3, [sp, #20]
 274:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 274 3 is_stmt 1 view .LVU26
 109              		.loc 1 274 24 is_stmt 0 view .LVU27
 110 005e 0694     		str	r4, [sp, #24]
 275:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 111              		.loc 1 275 3 is_stmt 1 view .LVU28
 112              		.loc 1 275 25 is_stmt 0 view .LVU29
 113 0060 0225     		movs	r5, #2
 114 0062 0795     		str	r5, [sp, #28]
 276:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 115              		.loc 1 276 3 is_stmt 1 view .LVU30
 116 0064 04A9     		add	r1, sp, #16
 117 0066 3046     		mov	r0, r6
 118 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL1:
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /*Configure GPIO pin : PB12 */
 279:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_12;
 120              		.loc 1 279 3 view .LVU31
 121              		.loc 1 279 23 is_stmt 0 view .LVU32
ARM GAS  /tmp/ccjdN8fC.s 			page 8


 122 006c 4FF48053 		mov	r3, #4096
 123 0070 0493     		str	r3, [sp, #16]
 280:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 124              		.loc 1 280 3 is_stmt 1 view .LVU33
 125              		.loc 1 280 24 is_stmt 0 view .LVU34
 126 0072 0594     		str	r4, [sp, #20]
 281:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 127              		.loc 1 281 3 is_stmt 1 view .LVU35
 128              		.loc 1 281 24 is_stmt 0 view .LVU36
 129 0074 0695     		str	r5, [sp, #24]
 282:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 130              		.loc 1 282 3 is_stmt 1 view .LVU37
 131 0076 04A9     		add	r1, sp, #16
 132 0078 0448     		ldr	r0, .L3+8
 133 007a FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL2:
 283:Core/Src/main.c **** 
 284:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 285:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 286:Core/Src/main.c **** }
 135              		.loc 1 286 1 is_stmt 0 view .LVU38
 136 007e 08B0     		add	sp, sp, #32
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 16
 139              		@ sp needed
 140 0080 70BD     		pop	{r4, r5, r6, pc}
 141              	.L4:
 142 0082 00BF     		.align	2
 143              	.L3:
 144 0084 00100240 		.word	1073876992
 145 0088 00100140 		.word	1073811456
 146 008c 000C0140 		.word	1073810432
 147              		.cfi_endproc
 148              	.LFE71:
 150              		.section	.text.led_blink,"ax",%progbits
 151              		.align	1
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 156              	led_blink:
 157              	.LFB72:
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 289:Core/Src/main.c **** 
 290:Core/Src/main.c **** static void led_blink(void)
 291:Core/Src/main.c **** {
 158              		.loc 1 291 1 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162 0000 08B5     		push	{r3, lr}
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 3, -8
 166              		.cfi_offset 14, -4
 292:Core/Src/main.c ****   static uint32_t current_ticks = LED_DELAY;
 167              		.loc 1 292 3 view .LVU40
ARM GAS  /tmp/ccjdN8fC.s 			page 9


 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   if ((HAL_GetTick() - current_ticks) < LED_DELAY)
 168              		.loc 1 294 3 view .LVU41
 169              		.loc 1 294 8 is_stmt 0 view .LVU42
 170 0002 FFF7FEFF 		bl	HAL_GetTick
 171              	.LVL3:
 172              		.loc 1 294 22 discriminator 1 view .LVU43
 173 0006 084B     		ldr	r3, .L9
 174 0008 1B68     		ldr	r3, [r3]
 175 000a C01A     		subs	r0, r0, r3
 176              		.loc 1 294 6 discriminator 1 view .LVU44
 177 000c B0F5FA7F 		cmp	r0, #500
 178 0010 00D2     		bcs	.L8
 179              	.L5:
 295:Core/Src/main.c ****     return;
 296:Core/Src/main.c ****   
 297:Core/Src/main.c ****   current_ticks = HAL_GetTick();
 298:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 299:Core/Src/main.c **** }
 180              		.loc 1 299 1 view .LVU45
 181 0012 08BD     		pop	{r3, pc}
 182              	.L8:
 297:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 183              		.loc 1 297 3 is_stmt 1 view .LVU46
 297:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 184              		.loc 1 297 19 is_stmt 0 view .LVU47
 185 0014 FFF7FEFF 		bl	HAL_GetTick
 186              	.LVL4:
 297:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 187              		.loc 1 297 17 discriminator 1 view .LVU48
 188 0018 034B     		ldr	r3, .L9
 189 001a 1860     		str	r0, [r3]
 298:Core/Src/main.c **** }
 190              		.loc 1 298 3 is_stmt 1 view .LVU49
 191 001c 4FF40051 		mov	r1, #8192
 192 0020 0248     		ldr	r0, .L9+4
 193 0022 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 194              	.LVL5:
 195 0026 F4E7     		b	.L5
 196              	.L10:
 197              		.align	2
 198              	.L9:
 199 0028 00000000 		.word	current_ticks.0
 200 002c 00100140 		.word	1073811456
 201              		.cfi_endproc
 202              	.LFE72:
 204              		.section	.text.Error_Handler,"ax",%progbits
 205              		.align	1
 206              		.global	Error_Handler
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 211              	Error_Handler:
 212              	.LFB74:
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** static void start_application_code()
 302:Core/Src/main.c **** {
ARM GAS  /tmp/ccjdN8fC.s 			page 10


 303:Core/Src/main.c ****   // volatile?
 304:Core/Src/main.c ****   volatile uint32_t *application_start = (uint32_t *)APP_START_ADDRESS;
 305:Core/Src/main.c ****   if (*application_start != SRAM_END)
 306:Core/Src/main.c ****     Error_Handler();
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   HAL_UART_DeInit(&huart1);
 309:Core/Src/main.c ****   HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 310:Core/Src/main.c ****   HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 311:Core/Src/main.c ****   HAL_DeInit();
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   //RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 314:Core/Src/main.c ****   __disable_irq();
 315:Core/Src/main.c ****   __set_MSP(*application_start);
 316:Core/Src/main.c ****   // programming manual pg. 99
 317:Core/Src/main.c ****   __DMB();
 318:Core/Src/main.c ****   SCB->VTOR = (uint32_t)application_start;
 319:Core/Src/main.c ****   /// programming manual pg. 100
 320:Core/Src/main.c ****   __DSB();
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   // ???
 323:Core/Src/main.c ****   // uint32_t JumpAddress = *((volatile uint32_t*) (APP_START_ADDRESS + 4));
 324:Core/Src/main.c ****   // void (*reset_handler)(void) = (void*)JumpAddress;
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   // uint32_t jump_address = (volatile uint32_t)(0x1FFF 0000 + 4);
 327:Core/Src/main.c ****   // void (*boot_loader)(void) =  jump_address;
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   volatile uint32_t *jump_address = application_start + 
 330:Core/Src/main.c ****     sizeof(uint32_t);
 331:Core/Src/main.c ****   void (*reset_handler)(void) = (void*)jump_address;
 332:Core/Src/main.c ****   reset_handler();
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   // Never coming here
 335:Core/Src/main.c ****   Error_Handler();
 336:Core/Src/main.c **** }
 337:Core/Src/main.c **** 
 338:Core/Src/main.c **** /* USER CODE END 4 */
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /**
 341:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 342:Core/Src/main.c ****   * @retval None
 343:Core/Src/main.c ****   */
 344:Core/Src/main.c **** void Error_Handler(void)
 345:Core/Src/main.c **** {
 213              		.loc 1 345 1 view -0
 214              		.cfi_startproc
 215              		@ Volatile: function does not return.
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 08B5     		push	{r3, lr}
 219              	.LCFI4:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 3, -8
 222              		.cfi_offset 14, -4
 223              	.L12:
 346:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 347:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 348:Core/Src/main.c ****   //__disable_irq();
ARM GAS  /tmp/ccjdN8fC.s 			page 11


 349:Core/Src/main.c ****   while (1)
 224              		.loc 1 349 3 view .LVU51
 350:Core/Src/main.c ****   {
 351:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 225              		.loc 1 351 5 view .LVU52
 226 0002 4FF40051 		mov	r1, #8192
 227 0006 0348     		ldr	r0, .L14
 228 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 229              	.LVL6:
 352:Core/Src/main.c ****     HAL_Delay(LED_ERROR_DELAY);
 230              		.loc 1 352 5 discriminator 1 view .LVU53
 231 000c 9620     		movs	r0, #150
 232 000e FFF7FEFF 		bl	HAL_Delay
 233              	.LVL7:
 349:Core/Src/main.c ****   {
 234              		.loc 1 349 9 view .LVU54
 235 0012 F6E7     		b	.L12
 236              	.L15:
 237              		.align	2
 238              	.L14:
 239 0014 00100140 		.word	1073811456
 240              		.cfi_endproc
 241              	.LFE74:
 243              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 244              		.align	1
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 249              	MX_USART1_UART_Init:
 250              	.LFB70:
 225:Core/Src/main.c **** 
 251              		.loc 1 225 1 view -0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255 0000 08B5     		push	{r3, lr}
 256              	.LCFI5:
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 3, -8
 259              		.cfi_offset 14, -4
 234:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 260              		.loc 1 234 3 view .LVU56
 234:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 261              		.loc 1 234 19 is_stmt 0 view .LVU57
 262 0002 0A48     		ldr	r0, .L20
 263 0004 0A4B     		ldr	r3, .L20+4
 264 0006 0360     		str	r3, [r0]
 235:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 265              		.loc 1 235 3 is_stmt 1 view .LVU58
 235:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 266              		.loc 1 235 24 is_stmt 0 view .LVU59
 267 0008 4FF4E133 		mov	r3, #115200
 268 000c 4360     		str	r3, [r0, #4]
 236:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 269              		.loc 1 236 3 is_stmt 1 view .LVU60
 236:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 270              		.loc 1 236 26 is_stmt 0 view .LVU61
ARM GAS  /tmp/ccjdN8fC.s 			page 12


 271 000e 0023     		movs	r3, #0
 272 0010 8360     		str	r3, [r0, #8]
 237:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 273              		.loc 1 237 3 is_stmt 1 view .LVU62
 237:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 274              		.loc 1 237 24 is_stmt 0 view .LVU63
 275 0012 C360     		str	r3, [r0, #12]
 238:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 276              		.loc 1 238 3 is_stmt 1 view .LVU64
 238:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 277              		.loc 1 238 22 is_stmt 0 view .LVU65
 278 0014 0361     		str	r3, [r0, #16]
 239:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 279              		.loc 1 239 3 is_stmt 1 view .LVU66
 239:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 280              		.loc 1 239 20 is_stmt 0 view .LVU67
 281 0016 0C22     		movs	r2, #12
 282 0018 4261     		str	r2, [r0, #20]
 240:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 283              		.loc 1 240 3 is_stmt 1 view .LVU68
 240:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 284              		.loc 1 240 25 is_stmt 0 view .LVU69
 285 001a 8361     		str	r3, [r0, #24]
 241:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 286              		.loc 1 241 3 is_stmt 1 view .LVU70
 241:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 287              		.loc 1 241 28 is_stmt 0 view .LVU71
 288 001c C361     		str	r3, [r0, #28]
 242:Core/Src/main.c ****   {
 289              		.loc 1 242 3 is_stmt 1 view .LVU72
 242:Core/Src/main.c ****   {
 290              		.loc 1 242 7 is_stmt 0 view .LVU73
 291 001e FFF7FEFF 		bl	HAL_UART_Init
 292              	.LVL8:
 242:Core/Src/main.c ****   {
 293              		.loc 1 242 6 discriminator 1 view .LVU74
 294 0022 00B9     		cbnz	r0, .L19
 250:Core/Src/main.c **** 
 295              		.loc 1 250 1 view .LVU75
 296 0024 08BD     		pop	{r3, pc}
 297              	.L19:
 244:Core/Src/main.c ****   }
 298              		.loc 1 244 5 is_stmt 1 view .LVU76
 299 0026 FFF7FEFF 		bl	Error_Handler
 300              	.LVL9:
 301              	.L21:
 302 002a 00BF     		.align	2
 303              	.L20:
 304 002c 00000000 		.word	huart1
 305 0030 00380140 		.word	1073821696
 306              		.cfi_endproc
 307              	.LFE70:
 309              		.section	.text.start_application_code,"ax",%progbits
 310              		.align	1
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
ARM GAS  /tmp/ccjdN8fC.s 			page 13


 315              	start_application_code:
 316              	.LFB73:
 302:Core/Src/main.c ****   // volatile?
 317              		.loc 1 302 1 view -0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321 0000 08B5     		push	{r3, lr}
 322              	.LCFI6:
 323              		.cfi_def_cfa_offset 8
 324              		.cfi_offset 3, -8
 325              		.cfi_offset 14, -4
 304:Core/Src/main.c ****   if (*application_start != SRAM_END)
 326              		.loc 1 304 3 view .LVU78
 327              	.LVL10:
 305:Core/Src/main.c ****     Error_Handler();
 328              		.loc 1 305 3 view .LVU79
 305:Core/Src/main.c ****     Error_Handler();
 329              		.loc 1 305 7 is_stmt 0 view .LVU80
 330 0002 124B     		ldr	r3, .L25
 331 0004 1A68     		ldr	r2, [r3]
 305:Core/Src/main.c ****     Error_Handler();
 332              		.loc 1 305 6 view .LVU81
 333 0006 124B     		ldr	r3, .L25+4
 334 0008 9A42     		cmp	r2, r3
 335 000a 01D0     		beq	.L23
 306:Core/Src/main.c **** 
 336              		.loc 1 306 5 is_stmt 1 view .LVU82
 337 000c FFF7FEFF 		bl	Error_Handler
 338              	.LVL11:
 339              	.L23:
 308:Core/Src/main.c ****   HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 340              		.loc 1 308 3 view .LVU83
 341 0010 1048     		ldr	r0, .L25+8
 342 0012 FFF7FEFF 		bl	HAL_UART_DeInit
 343              	.LVL12:
 309:Core/Src/main.c ****   HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 344              		.loc 1 309 3 view .LVU84
 345 0016 4FF40051 		mov	r1, #8192
 346 001a 0F48     		ldr	r0, .L25+12
 347 001c FFF7FEFF 		bl	HAL_GPIO_DeInit
 348              	.LVL13:
 310:Core/Src/main.c ****   HAL_DeInit();
 349              		.loc 1 310 3 view .LVU85
 350 0020 4FF48051 		mov	r1, #4096
 351 0024 0D48     		ldr	r0, .L25+16
 352 0026 FFF7FEFF 		bl	HAL_GPIO_DeInit
 353              	.LVL14:
 311:Core/Src/main.c **** 
 354              		.loc 1 311 3 view .LVU86
 355 002a FFF7FEFF 		bl	HAL_DeInit
 356              	.LVL15:
 314:Core/Src/main.c ****   __set_MSP(*application_start);
 357              		.loc 1 314 3 view .LVU87
 358              	.LBB17:
 359              	.LBI17:
 360              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  /tmp/ccjdN8fC.s 			page 14


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccjdN8fC.s 			page 15


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
ARM GAS  /tmp/ccjdN8fC.s 			page 16


 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 361              		.loc 2 140 27 view .LVU88
 362              	.LBB18:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 363              		.loc 2 142 3 view .LVU89
 364              		.syntax unified
 365              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 366 002e 72B6     		cpsid i
 367              	@ 0 "" 2
 368              		.thumb
 369              		.syntax unified
 370              	.LBE18:
 371              	.LBE17:
 315:Core/Src/main.c ****   // programming manual pg. 99
 372              		.loc 1 315 3 view .LVU90
 373 0030 064B     		ldr	r3, .L25
 374 0032 1A68     		ldr	r2, [r3]
 375              	.LVL16:
 376              	.LBB19:
 377              	.LBI19:
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccjdN8fC.s 			page 17


 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccjdN8fC.s 			page 18


 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccjdN8fC.s 			page 19


 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjdN8fC.s 			page 20


 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 378              		.loc 2 331 27 view .LVU91
 379              	.LBB20:
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 380              		.loc 2 333 3 view .LVU92
 381              		.syntax unified
 382              	@ 333 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 383 0034 82F30888 		MSR msp, r2
 384              	@ 0 "" 2
 385              	.LVL17:
 386              		.loc 2 333 3 is_stmt 0 view .LVU93
 387              		.thumb
 388              		.syntax unified
 389              	.LBE20:
 390              	.LBE19:
 317:Core/Src/main.c ****   SCB->VTOR = (uint32_t)application_start;
 391              		.loc 1 317 3 is_stmt 1 view .LVU94
 392              	.LBB21:
 393              	.LBI21:
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjdN8fC.s 			page 21


 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
ARM GAS  /tmp/ccjdN8fC.s 			page 22


 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccjdN8fC.s 			page 23


 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjdN8fC.s 			page 24


 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
ARM GAS  /tmp/ccjdN8fC.s 			page 25


 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/ccjdN8fC.s 			page 26


 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
ARM GAS  /tmp/ccjdN8fC.s 			page 27


 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
ARM GAS  /tmp/ccjdN8fC.s 			page 28


 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
ARM GAS  /tmp/ccjdN8fC.s 			page 29


 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
ARM GAS  /tmp/ccjdN8fC.s 			page 30


 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 394              		.loc 2 888 27 view .LVU95
 395              	.LBB22:
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 396              		.loc 2 890 3 view .LVU96
 397              		.syntax unified
 398              	@ 890 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 399 0038 BFF35F8F 		dmb 0xF
 400              	@ 0 "" 2
 401              		.thumb
 402              		.syntax unified
 403              	.LBE22:
 404              	.LBE21:
 318:Core/Src/main.c ****   /// programming manual pg. 100
 405              		.loc 1 318 3 view .LVU97
 318:Core/Src/main.c ****   /// programming manual pg. 100
 406              		.loc 1 318 13 is_stmt 0 view .LVU98
 407 003c 084A     		ldr	r2, .L25+20
 408 003e 9360     		str	r3, [r2, #8]
 320:Core/Src/main.c **** 
 409              		.loc 1 320 3 is_stmt 1 view .LVU99
 410              	.LBB23:
 411              	.LBI23:
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412              		.loc 2 877 27 view .LVU100
 413              	.LBB24:
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414              		.loc 2 879 3 view .LVU101
 415              		.syntax unified
 416              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 417 0040 BFF34F8F 		dsb 0xF
 418              	@ 0 "" 2
 419              		.thumb
 420              		.syntax unified
 421              	.LBE24:
 422              	.LBE23:
 329:Core/Src/main.c ****     sizeof(uint32_t);
 423              		.loc 1 329 3 view .LVU102
 424              	.LVL18:
 331:Core/Src/main.c ****   reset_handler();
 425              		.loc 1 331 3 view .LVU103
 332:Core/Src/main.c **** 
 426              		.loc 1 332 3 view .LVU104
 427 0044 1033     		adds	r3, r3, #16
 428 0046 9847     		blx	r3
 429              	.LVL19:
ARM GAS  /tmp/ccjdN8fC.s 			page 31


 335:Core/Src/main.c **** }
 430              		.loc 1 335 3 view .LVU105
 431 0048 FFF7FEFF 		bl	Error_Handler
 432              	.LVL20:
 433              	.L26:
 434              		.align	2
 435              	.L25:
 436 004c 00A00008 		.word	134258688
 437 0050 00500020 		.word	536891392
 438 0054 00000000 		.word	huart1
 439 0058 00100140 		.word	1073811456
 440 005c 000C0140 		.word	1073810432
 441 0060 00ED00E0 		.word	-536810240
 442              		.cfi_endproc
 443              	.LFE73:
 445              		.section	.text.SystemClock_Config,"ax",%progbits
 446              		.align	1
 447              		.global	SystemClock_Config
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 452              	SystemClock_Config:
 453              	.LFB69:
 188:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 454              		.loc 1 188 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 64
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458 0000 00B5     		push	{lr}
 459              	.LCFI7:
 460              		.cfi_def_cfa_offset 4
 461              		.cfi_offset 14, -4
 462 0002 91B0     		sub	sp, sp, #68
 463              	.LCFI8:
 464              		.cfi_def_cfa_offset 72
 189:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 465              		.loc 1 189 3 view .LVU107
 189:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 466              		.loc 1 189 22 is_stmt 0 view .LVU108
 467 0004 2822     		movs	r2, #40
 468 0006 0021     		movs	r1, #0
 469 0008 06A8     		add	r0, sp, #24
 470 000a FFF7FEFF 		bl	memset
 471              	.LVL21:
 190:Core/Src/main.c **** 
 472              		.loc 1 190 3 is_stmt 1 view .LVU109
 190:Core/Src/main.c **** 
 473              		.loc 1 190 22 is_stmt 0 view .LVU110
 474 000e 0023     		movs	r3, #0
 475 0010 0193     		str	r3, [sp, #4]
 476 0012 0293     		str	r3, [sp, #8]
 477 0014 0393     		str	r3, [sp, #12]
 478 0016 0493     		str	r3, [sp, #16]
 479 0018 0593     		str	r3, [sp, #20]
 195:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 480              		.loc 1 195 3 is_stmt 1 view .LVU111
 195:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccjdN8fC.s 			page 32


 481              		.loc 1 195 36 is_stmt 0 view .LVU112
 482 001a 0223     		movs	r3, #2
 483 001c 0693     		str	r3, [sp, #24]
 196:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 484              		.loc 1 196 3 is_stmt 1 view .LVU113
 196:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 485              		.loc 1 196 30 is_stmt 0 view .LVU114
 486 001e 0123     		movs	r3, #1
 487 0020 0A93     		str	r3, [sp, #40]
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 488              		.loc 1 197 3 is_stmt 1 view .LVU115
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 489              		.loc 1 197 41 is_stmt 0 view .LVU116
 490 0022 1023     		movs	r3, #16
 491 0024 0B93     		str	r3, [sp, #44]
 198:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 492              		.loc 1 198 3 is_stmt 1 view .LVU117
 199:Core/Src/main.c ****   {
 493              		.loc 1 199 3 view .LVU118
 199:Core/Src/main.c ****   {
 494              		.loc 1 199 7 is_stmt 0 view .LVU119
 495 0026 06A8     		add	r0, sp, #24
 496 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 497              	.LVL22:
 199:Core/Src/main.c ****   {
 498              		.loc 1 199 6 discriminator 1 view .LVU120
 499 002c 68B9     		cbnz	r0, .L31
 206:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 500              		.loc 1 206 3 is_stmt 1 view .LVU121
 206:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 501              		.loc 1 206 31 is_stmt 0 view .LVU122
 502 002e 0F23     		movs	r3, #15
 503 0030 0193     		str	r3, [sp, #4]
 208:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 504              		.loc 1 208 3 is_stmt 1 view .LVU123
 208:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 505              		.loc 1 208 34 is_stmt 0 view .LVU124
 506 0032 0021     		movs	r1, #0
 507 0034 0291     		str	r1, [sp, #8]
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 508              		.loc 1 209 3 is_stmt 1 view .LVU125
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 509              		.loc 1 209 35 is_stmt 0 view .LVU126
 510 0036 0391     		str	r1, [sp, #12]
 210:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 511              		.loc 1 210 3 is_stmt 1 view .LVU127
 210:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 512              		.loc 1 210 36 is_stmt 0 view .LVU128
 513 0038 0491     		str	r1, [sp, #16]
 211:Core/Src/main.c **** 
 514              		.loc 1 211 3 is_stmt 1 view .LVU129
 211:Core/Src/main.c **** 
 515              		.loc 1 211 36 is_stmt 0 view .LVU130
 516 003a 0591     		str	r1, [sp, #20]
 213:Core/Src/main.c ****   {
 517              		.loc 1 213 3 is_stmt 1 view .LVU131
 213:Core/Src/main.c ****   {
ARM GAS  /tmp/ccjdN8fC.s 			page 33


 518              		.loc 1 213 7 is_stmt 0 view .LVU132
 519 003c 01A8     		add	r0, sp, #4
 520 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 521              	.LVL23:
 213:Core/Src/main.c ****   {
 522              		.loc 1 213 6 discriminator 1 view .LVU133
 523 0042 20B9     		cbnz	r0, .L32
 217:Core/Src/main.c **** 
 524              		.loc 1 217 1 view .LVU134
 525 0044 11B0     		add	sp, sp, #68
 526              	.LCFI9:
 527              		.cfi_remember_state
 528              		.cfi_def_cfa_offset 4
 529              		@ sp needed
 530 0046 5DF804FB 		ldr	pc, [sp], #4
 531              	.L31:
 532              	.LCFI10:
 533              		.cfi_restore_state
 201:Core/Src/main.c ****   }
 534              		.loc 1 201 5 is_stmt 1 view .LVU135
 535 004a FFF7FEFF 		bl	Error_Handler
 536              	.LVL24:
 537              	.L32:
 215:Core/Src/main.c ****   }
 538              		.loc 1 215 5 view .LVU136
 539 004e FFF7FEFF 		bl	Error_Handler
 540              	.LVL25:
 541              		.cfi_endproc
 542              	.LFE69:
 544              		.section	.text.main,"ax",%progbits
 545              		.align	1
 546              		.global	main
 547              		.syntax unified
 548              		.thumb
 549              		.thumb_func
 551              	main:
 552              	.LFB68:
 123:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 553              		.loc 1 123 1 view -0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557 0000 10B5     		push	{r4, lr}
 558              	.LCFI11:
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 4, -8
 561              		.cfi_offset 14, -4
 131:Core/Src/main.c **** 
 562              		.loc 1 131 3 view .LVU138
 563 0002 FFF7FEFF 		bl	HAL_Init
 564              	.LVL26:
 138:Core/Src/main.c **** 
 565              		.loc 1 138 3 view .LVU139
 566 0006 FFF7FEFF 		bl	SystemClock_Config
 567              	.LVL27:
 145:Core/Src/main.c ****   uint32_t current_ticks = HAL_GetTick();
 568              		.loc 1 145 3 view .LVU140
ARM GAS  /tmp/ccjdN8fC.s 			page 34


 569 000a FFF7FEFF 		bl	MX_GPIO_Init
 570              	.LVL28:
 146:Core/Src/main.c **** 
 571              		.loc 1 146 3 view .LVU141
 146:Core/Src/main.c **** 
 572              		.loc 1 146 28 is_stmt 0 view .LVU142
 573 000e FFF7FEFF 		bl	HAL_GetTick
 574              	.LVL29:
 575 0012 0446     		mov	r4, r0
 576              	.LVL30:
 148:Core/Src/main.c ****   {
 577              		.loc 1 148 3 is_stmt 1 view .LVU143
 148:Core/Src/main.c ****   {
 578              		.loc 1 148 7 is_stmt 0 view .LVU144
 579 0014 4FF48051 		mov	r1, #4096
 580 0018 0C48     		ldr	r0, .L39
 581              	.LVL31:
 148:Core/Src/main.c ****   {
 582              		.loc 1 148 7 view .LVU145
 583 001a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 584              	.LVL32:
 148:Core/Src/main.c ****   {
 585              		.loc 1 148 6 discriminator 1 view .LVU146
 586 001e 0128     		cmp	r0, #1
 587 0020 01D0     		beq	.L38
 167:Core/Src/main.c ****   }
 588              		.loc 1 167 5 is_stmt 1 view .LVU147
 589 0022 FFF7FEFF 		bl	start_application_code
 590              	.LVL33:
 591              	.L38:
 150:Core/Src/main.c ****     bootloader_start_output();
 592              		.loc 1 150 5 view .LVU148
 593 0026 FFF7FEFF 		bl	MX_USART1_UART_Init
 594              	.LVL34:
 151:Core/Src/main.c **** 
 595              		.loc 1 151 5 view .LVU149
 596 002a FFF7FEFF 		bl	bootloader_start_output
 597              	.LVL35:
 598              	.L35:
 153:Core/Src/main.c ****     {
 599              		.loc 1 153 5 view .LVU150
 155:Core/Src/main.c **** 
 600              		.loc 1 155 7 view .LVU151
 601 002e FFF7FEFF 		bl	led_blink
 602              	.LVL36:
 157:Core/Src/main.c ****         continue;
 603              		.loc 1 157 7 view .LVU152
 157:Core/Src/main.c ****         continue;
 604              		.loc 1 157 12 is_stmt 0 view .LVU153
 605 0032 FFF7FEFF 		bl	HAL_GetTick
 606              	.LVL37:
 157:Core/Src/main.c ****         continue;
 607              		.loc 1 157 26 discriminator 1 view .LVU154
 608 0036 031B     		subs	r3, r0, r4
 157:Core/Src/main.c ****         continue;
 609              		.loc 1 157 10 discriminator 1 view .LVU155
 610 0038 632B     		cmp	r3, #99
ARM GAS  /tmp/ccjdN8fC.s 			page 35


 611 003a F8D9     		bls	.L35
 159:Core/Src/main.c ****         continue;
 612              		.loc 1 159 7 is_stmt 1 view .LVU156
 159:Core/Src/main.c ****         continue;
 613              		.loc 1 159 11 is_stmt 0 view .LVU157
 614 003c FFF7FEFF 		bl	bootloader_proccess_input
 615              	.LVL38:
 159:Core/Src/main.c ****         continue;
 616              		.loc 1 159 10 discriminator 1 view .LVU158
 617 0040 0328     		cmp	r0, #3
 618 0042 F4D0     		beq	.L35
 162:Core/Src/main.c ****     }
 619              		.loc 1 162 7 is_stmt 1 view .LVU159
 162:Core/Src/main.c ****     }
 620              		.loc 1 162 23 is_stmt 0 view .LVU160
 621 0044 FFF7FEFF 		bl	HAL_GetTick
 622              	.LVL39:
 623 0048 0446     		mov	r4, r0
 624              	.LVL40:
 162:Core/Src/main.c ****     }
 625              		.loc 1 162 23 view .LVU161
 626 004a F0E7     		b	.L35
 627              	.L40:
 628              		.align	2
 629              	.L39:
 630 004c 000C0140 		.word	1073810432
 631              		.cfi_endproc
 632              	.LFE68:
 634              		.section	.text._bootloader_start,"ax",%progbits
 635              		.align	1
 636              		.weak	_bootloader_start
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 641              	_bootloader_start:
 642              	.LFB67:
 108:Core/Src/main.c ****     __initialize_data(&_sidata, &_sdata, &_edata);
 643              		.loc 1 108 1 is_stmt 1 view -0
 644              		.cfi_startproc
 645              		@ Volatile: function does not return.
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648 0000 08B5     		push	{r3, lr}
 649              	.LCFI12:
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 3, -8
 652              		.cfi_offset 14, -4
 109:Core/Src/main.c ****     __initialize_bss(&_sbss, &_ebss);
 653              		.loc 1 109 5 view .LVU163
 654              	.LVL41:
 655              	.LBB25:
 656              	.LBI25:
  86:Core/Src/main.c ****     uint32_t* flash_begin,
 657              		.loc 1 86 20 view .LVU164
 658              	.LBB26:
  91:Core/Src/main.c ****     while (p < data_end)
 659              		.loc 1 91 5 view .LVU165
ARM GAS  /tmp/ccjdN8fC.s 			page 36


  92:Core/Src/main.c ****         *p++ = *flash_begin++;
 660              		.loc 1 92 5 view .LVU166
  91:Core/Src/main.c ****     while (p < data_end)
 661              		.loc 1 91 15 is_stmt 0 view .LVU167
 662 0002 0A4B     		ldr	r3, .L47
  92:Core/Src/main.c ****         *p++ = *flash_begin++;
 663              		.loc 1 92 11 view .LVU168
 664 0004 0A4A     		ldr	r2, .L47+4
 665 0006 03E0     		b	.L42
 666              	.LVL42:
 667              	.L43:
  93:Core/Src/main.c **** }
 668              		.loc 1 93 9 is_stmt 1 view .LVU169
  93:Core/Src/main.c **** }
 669              		.loc 1 93 16 is_stmt 0 view .LVU170
 670 0008 52F8041B 		ldr	r1, [r2], #4
 671              	.LVL43:
  93:Core/Src/main.c **** }
 672              		.loc 1 93 14 view .LVU171
 673 000c 43F8041B 		str	r1, [r3], #4
 674              	.LVL44:
 675              	.L42:
  92:Core/Src/main.c ****         *p++ = *flash_begin++;
 676              		.loc 1 92 14 is_stmt 1 view .LVU172
 677 0010 0849     		ldr	r1, .L47+8
 678 0012 8B42     		cmp	r3, r1
 679 0014 F8D3     		bcc	.L43
 680              	.LBE26:
 681              	.LBE25:
 682              	.LBB27:
 683              	.LBB28:
 101:Core/Src/main.c ****     while (p < bss_end)
 684              		.loc 1 101 15 is_stmt 0 view .LVU173
 685 0016 084B     		ldr	r3, .L47+12
 686              	.LVL45:
 101:Core/Src/main.c ****     while (p < bss_end)
 687              		.loc 1 101 15 view .LVU174
 688 0018 02E0     		b	.L44
 689              	.LVL46:
 690              	.L45:
 103:Core/Src/main.c **** }
 691              		.loc 1 103 9 is_stmt 1 view .LVU175
 103:Core/Src/main.c **** }
 692              		.loc 1 103 14 is_stmt 0 view .LVU176
 693 001a 0022     		movs	r2, #0
 694 001c 43F8042B 		str	r2, [r3], #4
 695              	.LVL47:
 696              	.L44:
 102:Core/Src/main.c ****         *p++ = 0;
 697              		.loc 1 102 14 is_stmt 1 view .LVU177
 698 0020 064A     		ldr	r2, .L47+16
 699 0022 9342     		cmp	r3, r2
 700 0024 F9D3     		bcc	.L45
 701              	.LVL48:
 102:Core/Src/main.c ****         *p++ = 0;
 702              		.loc 1 102 14 is_stmt 0 view .LVU178
 703              	.LBE28:
ARM GAS  /tmp/ccjdN8fC.s 			page 37


 704              	.LBE27:
 111:Core/Src/main.c **** 
 705              		.loc 1 111 5 is_stmt 1 view .LVU179
 706 0026 FFF7FEFF 		bl	main
 707              	.LVL49:
 708              	.L48:
 709 002a 00BF     		.align	2
 710              	.L47:
 711 002c 00000000 		.word	_sdata
 712 0030 00000000 		.word	_sidata
 713 0034 00000000 		.word	_edata
 714 0038 00000000 		.word	_sbss
 715 003c 00000000 		.word	_ebss
 716              		.cfi_endproc
 717              	.LFE67:
 719              		.section	.data.current_ticks.0,"aw"
 720              		.align	2
 723              	current_ticks.0:
 724 0000 F4010000 		.word	500
 725              		.global	vector_table
 726              		.section	.isr_vector,"aw"
 727              		.align	2
 730              	vector_table:
 731 0000 00500020 		.word	536891392
 732 0004 00000000 		.word	_bootloader_start
 733 0008 00000000 		.word	0
 734 000c 00000000 		.word	0
 735 0010 00000000 		.word	0
 736 0014 00000000 		.word	0
 737 0018 00000000 		.word	0
 738 001c 00000000 		.word	0
 739 0020 00000000 		.word	0
 740 0024 00000000 		.word	0
 741 0028 00000000 		.word	0
 742 002c 00000000 		.word	0
 743 0030 00000000 		.word	0
 744 0034 00000000 		.word	0
 745 0038 00000000 		.word	0
 746 003c 00000000 		.word	SysTick_Handler
 747              		.global	bootloader_uart
 748              		.section	.data.bootloader_uart,"aw"
 749              		.align	2
 752              	bootloader_uart:
 753 0000 00000000 		.word	huart1
 754              		.global	huart1
 755              		.section	.bss.huart1,"aw",%nobits
 756              		.align	2
 759              	huart1:
 760 0000 00000000 		.space	72
 760      00000000 
 760      00000000 
 760      00000000 
 760      00000000 
 761              		.text
 762              	.Letext0:
 763              		.file 3 "/usr/local/src/arm-gnu-toolchain-13.2/arm-none-eabi/include/machine/_default_types.h"
 764              		.file 4 "/usr/local/src/arm-gnu-toolchain-13.2/arm-none-eabi/include/sys/_stdint.h"
ARM GAS  /tmp/ccjdN8fC.s 			page 38


 765              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 766              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 767              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 768              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 769              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 770              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 771              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 772              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 773              		.file 13 "External/bootloader/Inc/bootloader_defs.h"
 774              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 775              		.file 15 "External/bootloader/Inc/bootloader_cmd.h"
 776              		.file 16 "<built-in>"
ARM GAS  /tmp/ccjdN8fC.s 			page 39


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccjdN8fC.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccjdN8fC.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccjdN8fC.s:144    .text.MX_GPIO_Init:00000084 $d
     /tmp/ccjdN8fC.s:151    .text.led_blink:00000000 $t
     /tmp/ccjdN8fC.s:156    .text.led_blink:00000000 led_blink
     /tmp/ccjdN8fC.s:199    .text.led_blink:00000028 $d
     /tmp/ccjdN8fC.s:723    .data.current_ticks.0:00000000 current_ticks.0
     /tmp/ccjdN8fC.s:205    .text.Error_Handler:00000000 $t
     /tmp/ccjdN8fC.s:211    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccjdN8fC.s:239    .text.Error_Handler:00000014 $d
     /tmp/ccjdN8fC.s:244    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccjdN8fC.s:249    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccjdN8fC.s:304    .text.MX_USART1_UART_Init:0000002c $d
     /tmp/ccjdN8fC.s:759    .bss.huart1:00000000 huart1
     /tmp/ccjdN8fC.s:310    .text.start_application_code:00000000 $t
     /tmp/ccjdN8fC.s:315    .text.start_application_code:00000000 start_application_code
     /tmp/ccjdN8fC.s:436    .text.start_application_code:0000004c $d
     /tmp/ccjdN8fC.s:446    .text.SystemClock_Config:00000000 $t
     /tmp/ccjdN8fC.s:452    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccjdN8fC.s:545    .text.main:00000000 $t
     /tmp/ccjdN8fC.s:551    .text.main:00000000 main
     /tmp/ccjdN8fC.s:630    .text.main:0000004c $d
     /tmp/ccjdN8fC.s:635    .text._bootloader_start:00000000 $t
     /tmp/ccjdN8fC.s:641    .text._bootloader_start:00000000 _bootloader_start
     /tmp/ccjdN8fC.s:711    .text._bootloader_start:0000002c $d
     /tmp/ccjdN8fC.s:720    .data.current_ticks.0:00000000 $d
     /tmp/ccjdN8fC.s:730    .isr_vector:00000000 vector_table
     /tmp/ccjdN8fC.s:727    .isr_vector:00000000 $d
     /tmp/ccjdN8fC.s:752    .data.bootloader_uart:00000000 bootloader_uart
     /tmp/ccjdN8fC.s:749    .data.bootloader_uart:00000000 $d
     /tmp/ccjdN8fC.s:756    .bss.huart1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GetTick
HAL_GPIO_TogglePin
HAL_Delay
HAL_UART_Init
HAL_UART_DeInit
HAL_GPIO_DeInit
HAL_DeInit
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_ReadPin
bootloader_start_output
bootloader_proccess_input
_sdata
_sidata
_edata
_sbss
_ebss
SysTick_Handler
ARM GAS  /tmp/ccjdN8fC.s 			page 40


