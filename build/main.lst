ARM GAS  /tmp/ccIIVeff.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.Error_Handler,"ax",%progbits
  19              		.align	1
  20              		.global	Error_Handler
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	Error_Handler:
  26              	.LFB74:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdint.h>
  25:Core/Src/main.c **** #include <stdbool.h>
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include "bootloader_cmd.h"
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  32:Core/Src/main.c **** 
ARM GAS  /tmp/ccIIVeff.s 			page 2


  33:Core/Src/main.c **** /* USER CODE END PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PD */
  37:Core/Src/main.c **** #define GET_VALUE_FROM_ADDR(address) \
  38:Core/Src/main.c ****   *((volatile uint32_t*)(address))
  39:Core/Src/main.c **** /* USER CODE END PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PM */
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** UART_HandleTypeDef huart1;
  47:Core/Src/main.c **** UART_HandleTypeDef* bootloader_uart = &huart1;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** extern uint32_t _sidata; // .data in flash (VMA)
  51:Core/Src/main.c **** extern uint32_t _sdata; // start of .data (initialize vars) in flash
  52:Core/Src/main.c **** extern uint32_t _edata;
  53:Core/Src/main.c **** extern uint32_t _sbss; // start of .bss (not initialize vars) in SRAM
  54:Core/Src/main.c **** extern uint32_t _ebss;
  55:Core/Src/main.c **** /* USER CODE END PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/main.c **** void SystemClock_Config(void);
  59:Core/Src/main.c **** static void MX_GPIO_Init(void);
  60:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  61:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  62:Core/Src/main.c **** void _bootloader_start(void);
  63:Core/Src/main.c **** int main(void);
  64:Core/Src/main.c **** void SysTick_Handler(void);
  65:Core/Src/main.c **** void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin);
  66:Core/Src/main.c **** static void led_blink(void);
  67:Core/Src/main.c **** static void start_application_code(void);
  68:Core/Src/main.c **** /* USER CODE END PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  71:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** // Minimal vector table
  74:Core/Src/main.c **** uint32_t *vector_table[] __attribute__((section(".isr_vector"))) = {
  75:Core/Src/main.c ****   (uint32_t *) SRAM_END, // initial stack pointer
  76:Core/Src/main.c ****   (uint32_t *) _bootloader_start,
  77:Core/Src/main.c ****   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  78:Core/Src/main.c ****   (uint32_t *)SysTick_Handler 
  79:Core/Src/main.c **** };
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** __attribute__((always_inline))
  82:Core/Src/main.c **** inline static void __initialize_data(
  83:Core/Src/main.c ****     uint32_t* flash_begin,
  84:Core/Src/main.c ****     uint32_t* data_begin,
  85:Core/Src/main.c ****     uint32_t* data_end
  86:Core/Src/main.c **** ) {
  87:Core/Src/main.c ****     uint32_t *p = data_begin;
  88:Core/Src/main.c ****     while (p < data_end)
  89:Core/Src/main.c ****         *p++ = *flash_begin++;
ARM GAS  /tmp/ccIIVeff.s 			page 3


  90:Core/Src/main.c **** }
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** __attribute__((always_inline))
  93:Core/Src/main.c **** inline static void __initialize_bss(
  94:Core/Src/main.c ****     uint32_t* bss_begin,
  95:Core/Src/main.c ****     uint32_t* bss_end
  96:Core/Src/main.c **** ) {
  97:Core/Src/main.c ****     uint32_t *p = bss_begin;
  98:Core/Src/main.c ****     while (p < bss_end)
  99:Core/Src/main.c ****         *p++ = 0;
 100:Core/Src/main.c **** }
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** __attribute__((noreturn,weak))
 103:Core/Src/main.c **** void _bootloader_start(void)
 104:Core/Src/main.c **** {
 105:Core/Src/main.c ****     __initialize_data(&_sidata, &_sdata, &_edata);
 106:Core/Src/main.c ****     __initialize_bss(&_sbss, &_ebss);
 107:Core/Src/main.c ****     main();
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****     for(;;);
 110:Core/Src/main.c **** }
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* USER CODE END 0 */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /**
 115:Core/Src/main.c ****   * @brief  The application entry point.
 116:Core/Src/main.c ****   * @retval int
 117:Core/Src/main.c ****   */
 118:Core/Src/main.c **** int main(void)
 119:Core/Src/main.c **** {
 120:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* USER CODE END 1 */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 127:Core/Src/main.c ****   HAL_Init();
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* USER CODE END Init */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* Configure the system clock */
 134:Core/Src/main.c ****   SystemClock_Config();
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE END SysInit */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* Initialize all configured peripherals */
 141:Core/Src/main.c ****   MX_GPIO_Init();
 142:Core/Src/main.c ****   uint32_t current_ticks = HAL_GetTick();
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET)
 145:Core/Src/main.c ****   {
 146:Core/Src/main.c ****     MX_USART1_UART_Init();
ARM GAS  /tmp/ccIIVeff.s 			page 4


 147:Core/Src/main.c ****     bootloader_start_output();
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****     while (true)
 150:Core/Src/main.c ****     {
 151:Core/Src/main.c ****       led_blink();
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****       if ((HAL_GetTick() - current_ticks) < UART_POLLING_DELAY)
 154:Core/Src/main.c ****         continue;
 155:Core/Src/main.c ****       if (bootloader_proccess_input() == BOOTLOADER_TIMEOUT)
 156:Core/Src/main.c ****         continue;
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****       current_ticks = HAL_GetTick();
 159:Core/Src/main.c ****     }
 160:Core/Src/main.c ****   }
 161:Core/Src/main.c ****   else
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     start_application_code();
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* USER CODE END 2 */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* Infinite loop */
 169:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 170:Core/Src/main.c ****   /* USER CODE END 3 */
 171:Core/Src/main.c **** }
 172:Core/Src/main.c **** 
 173:Core/Src/main.c **** /**
 174:Core/Src/main.c ****   * @brief System Clock Configuration
 175:Core/Src/main.c ****   * @retval None
 176:Core/Src/main.c ****   */
 177:Core/Src/main.c **** void SystemClock_Config(void)
 178:Core/Src/main.c **** {
 179:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 180:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 183:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 184:Core/Src/main.c ****   */
 185:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 186:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 187:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 188:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 189:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 190:Core/Src/main.c ****   {
 191:Core/Src/main.c ****     Error_Handler();
 192:Core/Src/main.c ****   }
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 195:Core/Src/main.c ****   */
 196:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 197:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 198:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 199:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 200:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 201:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
ARM GAS  /tmp/ccIIVeff.s 			page 5


 204:Core/Src/main.c ****   {
 205:Core/Src/main.c ****     Error_Handler();
 206:Core/Src/main.c ****   }
 207:Core/Src/main.c **** }
 208:Core/Src/main.c **** 
 209:Core/Src/main.c **** /**
 210:Core/Src/main.c ****   * @brief USART1 Initialization Function
 211:Core/Src/main.c ****   * @param None
 212:Core/Src/main.c ****   * @retval None
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 215:Core/Src/main.c **** {
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 224:Core/Src/main.c ****   huart1.Instance = USART1;
 225:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 226:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 227:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 228:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 229:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 230:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 231:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 232:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 233:Core/Src/main.c ****   {
 234:Core/Src/main.c ****     Error_Handler();
 235:Core/Src/main.c ****   }
 236:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c **** }
 241:Core/Src/main.c **** 
 242:Core/Src/main.c **** /**
 243:Core/Src/main.c ****   * @brief GPIO Initialization Function
 244:Core/Src/main.c ****   * @param None
 245:Core/Src/main.c ****   * @retval None
 246:Core/Src/main.c ****   */
 247:Core/Src/main.c **** static void MX_GPIO_Init(void)
 248:Core/Src/main.c **** {
 249:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 250:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 251:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 254:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 255:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 256:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 259:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 260:Core/Src/main.c **** 
ARM GAS  /tmp/ccIIVeff.s 			page 6


 261:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 262:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 263:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 264:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 265:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 266:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /*Configure GPIO pin : PB12 */
 269:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_12;
 270:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 271:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 272:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 275:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 276:Core/Src/main.c **** }
 277:Core/Src/main.c **** 
 278:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** static void led_blink(void)
 281:Core/Src/main.c **** {
 282:Core/Src/main.c ****   static uint32_t current_ticks = LED_DELAY;
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   if ((HAL_GetTick() - current_ticks) < LED_DELAY)
 285:Core/Src/main.c ****     return;
 286:Core/Src/main.c ****   
 287:Core/Src/main.c ****   current_ticks = HAL_GetTick();
 288:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 289:Core/Src/main.c **** }
 290:Core/Src/main.c **** 
 291:Core/Src/main.c **** static void start_application_code()
 292:Core/Src/main.c **** {
 293:Core/Src/main.c ****   uint32_t app_msp = GET_VALUE_FROM_ADDR(APP_START_ADDRESS);
 294:Core/Src/main.c ****   if (app_msp != SRAM_END)
 295:Core/Src/main.c ****     Error_Handler();
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 298:Core/Src/main.c ****   HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 299:Core/Src/main.c ****   HAL_DeInit();
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   // references manual pg. 104
 302:Core/Src/main.c ****   RCC->CIR = 0x00000000; // disable all interrupts related to clock
 303:Core/Src/main.c ****   __set_MSP(GET_VALUE_FROM_ADDR(APP_START_ADDRESS));
 304:Core/Src/main.c ****   // programming manual pg. 99
 305:Core/Src/main.c ****   __DMB();
 306:Core/Src/main.c ****   SCB->VTOR = APP_START_ADDRESS;
 307:Core/Src/main.c ****   // programming manual pg. 100
 308:Core/Src/main.c ****   __DSB();
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   uint32_t jump_address = GET_VALUE_FROM_ADDR(
 311:Core/Src/main.c ****     APP_START_ADDRESS + sizeof(uint32_t)
 312:Core/Src/main.c ****   );
 313:Core/Src/main.c ****   void (*reset_handler)(void) = (void*)jump_address;
 314:Core/Src/main.c ****   reset_handler();
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   // Never coming here
 317:Core/Src/main.c ****   Error_Handler();
ARM GAS  /tmp/ccIIVeff.s 			page 7


 318:Core/Src/main.c **** }
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** /* USER CODE END 4 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** /**
 323:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 324:Core/Src/main.c ****   * @retval None
 325:Core/Src/main.c ****   */
 326:Core/Src/main.c **** void Error_Handler(void)
 327:Core/Src/main.c **** {
  27              		.loc 1 327 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 328:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 329:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 330:Core/Src/main.c ****   //__disable_irq();
 331:Core/Src/main.c ****   while (1)
 332:Core/Src/main.c ****   {
 333:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  37              		.loc 1 333 5 is_stmt 0 view .LVU1
  38 0002 054C     		ldr	r4, .L3
  39              	.L2:
 331:Core/Src/main.c ****   {
  40              		.loc 1 331 3 is_stmt 1 view .LVU2
  41              		.loc 1 333 5 view .LVU3
  42 0004 2046     		mov	r0, r4
  43 0006 4FF40051 		mov	r1, #8192
  44 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
  45              	.LVL0:
 334:Core/Src/main.c ****     HAL_Delay(LED_ERROR_DELAY);
  46              		.loc 1 334 5 discriminator 1 view .LVU4
  47 000e 9620     		movs	r0, #150
  48 0010 FFF7FEFF 		bl	HAL_Delay
  49              	.LVL1:
 331:Core/Src/main.c ****   {
  50              		.loc 1 331 9 view .LVU5
  51 0014 F6E7     		b	.L2
  52              	.L4:
  53 0016 00BF     		.align	2
  54              	.L3:
  55 0018 00100140 		.word	1073811456
  56              		.cfi_endproc
  57              	.LFE74:
  59              		.section	.text.SystemClock_Config,"ax",%progbits
  60              		.align	1
  61              		.global	SystemClock_Config
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	SystemClock_Config:
ARM GAS  /tmp/ccIIVeff.s 			page 8


  67              	.LFB69:
 178:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  68              		.loc 1 178 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 64
  71              		@ frame_needed = 0, uses_anonymous_args = 0
 179:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  72              		.loc 1 179 3 view .LVU7
 178:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  73              		.loc 1 178 1 is_stmt 0 view .LVU8
  74 0000 00B5     		push	{lr}
  75              	.LCFI1:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 14, -4
  78 0002 91B0     		sub	sp, sp, #68
  79              	.LCFI2:
  80              		.cfi_def_cfa_offset 72
 179:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  81              		.loc 1 179 22 view .LVU9
  82 0004 2422     		movs	r2, #36
  83 0006 0021     		movs	r1, #0
  84 0008 07A8     		add	r0, sp, #28
  85 000a FFF7FEFF 		bl	memset
  86              	.LVL2:
 180:Core/Src/main.c **** 
  87              		.loc 1 180 3 is_stmt 1 view .LVU10
 180:Core/Src/main.c **** 
  88              		.loc 1 180 22 is_stmt 0 view .LVU11
  89 000e 1422     		movs	r2, #20
  90 0010 0021     		movs	r1, #0
  91 0012 01A8     		add	r0, sp, #4
  92 0014 FFF7FEFF 		bl	memset
  93              	.LVL3:
 185:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  94              		.loc 1 185 3 is_stmt 1 view .LVU12
 185:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  95              		.loc 1 185 36 is_stmt 0 view .LVU13
  96 0018 0223     		movs	r3, #2
 187:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  97              		.loc 1 187 41 view .LVU14
  98 001a 0121     		movs	r1, #1
 185:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  99              		.loc 1 185 36 view .LVU15
 100 001c 0693     		str	r3, [sp, #24]
 186:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 101              		.loc 1 186 3 is_stmt 1 view .LVU16
 187:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 102              		.loc 1 187 41 is_stmt 0 view .LVU17
 103 001e 1023     		movs	r3, #16
 189:Core/Src/main.c ****   {
 104              		.loc 1 189 7 view .LVU18
 105 0020 06A8     		add	r0, sp, #24
 187:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 106              		.loc 1 187 41 view .LVU19
 107 0022 CDE90A13 		strd	r1, r3, [sp, #40]
 188:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 108              		.loc 1 188 3 is_stmt 1 view .LVU20
ARM GAS  /tmp/ccIIVeff.s 			page 9


 189:Core/Src/main.c ****   {
 109              		.loc 1 189 3 view .LVU21
 189:Core/Src/main.c ****   {
 110              		.loc 1 189 7 is_stmt 0 view .LVU22
 111 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 112              	.LVL4:
 189:Core/Src/main.c ****   {
 113              		.loc 1 189 6 discriminator 1 view .LVU23
 114 002a 0146     		mov	r1, r0
 115 002c 08B1     		cbz	r0, .L6
 116              	.L7:
 191:Core/Src/main.c ****   }
 117              		.loc 1 191 5 is_stmt 1 view .LVU24
 118 002e FFF7FEFF 		bl	Error_Handler
 119              	.LVL5:
 120              	.L6:
 196:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 121              		.loc 1 196 3 view .LVU25
 196:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 122              		.loc 1 196 31 is_stmt 0 view .LVU26
 123 0032 0F23     		movs	r3, #15
 200:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 124              		.loc 1 200 36 view .LVU27
 125 0034 CDE90300 		strd	r0, r0, [sp, #12]
 198:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 126              		.loc 1 198 34 view .LVU28
 127 0038 CDE90130 		strd	r3, r0, [sp, #4]
 199:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 128              		.loc 1 199 3 is_stmt 1 view .LVU29
 201:Core/Src/main.c **** 
 129              		.loc 1 201 3 view .LVU30
 201:Core/Src/main.c **** 
 130              		.loc 1 201 36 is_stmt 0 view .LVU31
 131 003c 0590     		str	r0, [sp, #20]
 203:Core/Src/main.c ****   {
 132              		.loc 1 203 3 is_stmt 1 view .LVU32
 203:Core/Src/main.c ****   {
 133              		.loc 1 203 7 is_stmt 0 view .LVU33
 134 003e 01A8     		add	r0, sp, #4
 135 0040 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 136              	.LVL6:
 203:Core/Src/main.c ****   {
 137              		.loc 1 203 6 discriminator 1 view .LVU34
 138 0044 0028     		cmp	r0, #0
 139 0046 F2D1     		bne	.L7
 207:Core/Src/main.c **** 
 140              		.loc 1 207 1 view .LVU35
 141 0048 11B0     		add	sp, sp, #68
 142              	.LCFI3:
 143              		.cfi_def_cfa_offset 4
 144              		@ sp needed
 145 004a 5DF804FB 		ldr	pc, [sp], #4
 146              		.cfi_endproc
 147              	.LFE69:
 149              		.section	.text.startup.main,"ax",%progbits
 150              		.align	1
 151              		.global	main
ARM GAS  /tmp/ccIIVeff.s 			page 10


 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 156              	main:
 157              	.LFB68:
 119:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 158              		.loc 1 119 1 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 32
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 127:Core/Src/main.c **** 
 162              		.loc 1 127 3 view .LVU37
 119:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 163              		.loc 1 119 1 is_stmt 0 view .LVU38
 164 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 24
 167              		.cfi_offset 4, -24
 168              		.cfi_offset 5, -20
 169              		.cfi_offset 6, -16
 170              		.cfi_offset 7, -12
 171              		.cfi_offset 8, -8
 172              		.cfi_offset 14, -4
 173 0004 88B0     		sub	sp, sp, #32
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 56
 127:Core/Src/main.c **** 
 176              		.loc 1 127 3 view .LVU39
 177 0006 FFF7FEFF 		bl	HAL_Init
 178              	.LVL7:
 134:Core/Src/main.c **** 
 179              		.loc 1 134 3 is_stmt 1 view .LVU40
 180 000a FFF7FEFF 		bl	SystemClock_Config
 181              	.LVL8:
 141:Core/Src/main.c ****   uint32_t current_ticks = HAL_GetTick();
 182              		.loc 1 141 3 view .LVU41
 183              	.LBB29:
 184              	.LBI29:
 247:Core/Src/main.c **** {
 185              		.loc 1 247 13 view .LVU42
 186              	.LBB30:
 249:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 187              		.loc 1 249 3 view .LVU43
 249:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 188              		.loc 1 249 20 is_stmt 0 view .LVU44
 189 000e 1022     		movs	r2, #16
 190              	.LBB31:
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 191              		.loc 1 254 3 view .LVU45
 192 0010 4B4C     		ldr	r4, .L20
 193              	.LBE31:
 249:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 194              		.loc 1 249 20 view .LVU46
 195 0012 0021     		movs	r1, #0
 196 0014 0DEB0200 		add	r0, sp, r2
 197 0018 FFF7FEFF 		bl	memset
 198              	.LVL9:
ARM GAS  /tmp/ccIIVeff.s 			page 11


 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 199              		.loc 1 254 3 is_stmt 1 view .LVU47
 200              	.LBB32:
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 201              		.loc 1 254 3 view .LVU48
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 202              		.loc 1 254 3 view .LVU49
 203 001c A369     		ldr	r3, [r4, #24]
 204              	.LBE32:
 259:Core/Src/main.c **** 
 205              		.loc 1 259 3 is_stmt 0 view .LVU50
 206 001e 0022     		movs	r2, #0
 207              	.LBB33:
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 208              		.loc 1 254 3 view .LVU51
 209 0020 43F01003 		orr	r3, r3, #16
 210 0024 A361     		str	r3, [r4, #24]
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 211              		.loc 1 254 3 is_stmt 1 view .LVU52
 212 0026 A369     		ldr	r3, [r4, #24]
 213              	.LBE33:
 259:Core/Src/main.c **** 
 214              		.loc 1 259 3 is_stmt 0 view .LVU53
 215 0028 4FF40051 		mov	r1, #8192
 216              	.LBB34:
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 217              		.loc 1 254 3 view .LVU54
 218 002c 03F01003 		and	r3, r3, #16
 219 0030 0193     		str	r3, [sp, #4]
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 220              		.loc 1 254 3 is_stmt 1 view .LVU55
 221 0032 019B     		ldr	r3, [sp, #4]
 222              	.LBE34:
 254:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 223              		.loc 1 254 3 view .LVU56
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 224              		.loc 1 255 3 view .LVU57
 225              	.LBB35:
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 226              		.loc 1 255 3 view .LVU58
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 227              		.loc 1 255 3 view .LVU59
 228 0034 A369     		ldr	r3, [r4, #24]
 229              	.LBE35:
 259:Core/Src/main.c **** 
 230              		.loc 1 259 3 is_stmt 0 view .LVU60
 231 0036 4348     		ldr	r0, .L20+4
 232              	.LBB36:
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 233              		.loc 1 255 3 view .LVU61
 234 0038 43F00803 		orr	r3, r3, #8
 235 003c A361     		str	r3, [r4, #24]
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 236              		.loc 1 255 3 is_stmt 1 view .LVU62
 237 003e A369     		ldr	r3, [r4, #24]
 238              	.LBE36:
 265:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
ARM GAS  /tmp/ccIIVeff.s 			page 12


 239              		.loc 1 265 25 is_stmt 0 view .LVU63
 240 0040 0226     		movs	r6, #2
 241              	.LBB37:
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 242              		.loc 1 255 3 view .LVU64
 243 0042 03F00803 		and	r3, r3, #8
 244 0046 0293     		str	r3, [sp, #8]
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 245              		.loc 1 255 3 is_stmt 1 view .LVU65
 246 0048 029B     		ldr	r3, [sp, #8]
 247              	.LBE37:
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 248              		.loc 1 255 3 view .LVU66
 256:Core/Src/main.c **** 
 249              		.loc 1 256 3 view .LVU67
 250              	.LBB38:
 256:Core/Src/main.c **** 
 251              		.loc 1 256 3 view .LVU68
 256:Core/Src/main.c **** 
 252              		.loc 1 256 3 view .LVU69
 253 004a A369     		ldr	r3, [r4, #24]
 254              	.LBE38:
 265:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 255              		.loc 1 265 25 is_stmt 0 view .LVU70
 256 004c 0025     		movs	r5, #0
 257              	.LBB39:
 256:Core/Src/main.c **** 
 258              		.loc 1 256 3 view .LVU71
 259 004e 43F00403 		orr	r3, r3, #4
 260 0052 A361     		str	r3, [r4, #24]
 256:Core/Src/main.c **** 
 261              		.loc 1 256 3 is_stmt 1 view .LVU72
 262 0054 A369     		ldr	r3, [r4, #24]
 263              	.LBE39:
 263:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 264              		.loc 1 263 24 is_stmt 0 view .LVU73
 265 0056 4FF40058 		mov	r8, #8192
 266              	.LBB40:
 256:Core/Src/main.c **** 
 267              		.loc 1 256 3 view .LVU74
 268 005a 03F00403 		and	r3, r3, #4
 269 005e 0393     		str	r3, [sp, #12]
 256:Core/Src/main.c **** 
 270              		.loc 1 256 3 is_stmt 1 view .LVU75
 271 0060 039B     		ldr	r3, [sp, #12]
 272              	.LBE40:
 256:Core/Src/main.c **** 
 273              		.loc 1 256 3 view .LVU76
 259:Core/Src/main.c **** 
 274              		.loc 1 259 3 view .LVU77
 275 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 276              	.LVL10:
 262:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 277              		.loc 1 262 3 view .LVU78
 263:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 278              		.loc 1 263 24 is_stmt 0 view .LVU79
 279 0066 0123     		movs	r3, #1
ARM GAS  /tmp/ccIIVeff.s 			page 13


 269:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 280              		.loc 1 269 23 view .LVU80
 281 0068 4FF48057 		mov	r7, #4096
 266:Core/Src/main.c **** 
 282              		.loc 1 266 3 view .LVU81
 283 006c 3548     		ldr	r0, .L20+4
 284 006e 04A9     		add	r1, sp, #16
 263:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 285              		.loc 1 263 24 view .LVU82
 286 0070 CDE90483 		strd	r8, r3, [sp, #16]
 264:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 287              		.loc 1 264 3 is_stmt 1 view .LVU83
 265:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 288              		.loc 1 265 25 is_stmt 0 view .LVU84
 289 0074 CDE90656 		strd	r5, r6, [sp, #24]
 266:Core/Src/main.c **** 
 290              		.loc 1 266 3 is_stmt 1 view .LVU85
 291 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 292              	.LVL11:
 269:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 293              		.loc 1 269 3 view .LVU86
 272:Core/Src/main.c **** 
 294              		.loc 1 272 3 is_stmt 0 view .LVU87
 295 007c 04A9     		add	r1, sp, #16
 296 007e 3248     		ldr	r0, .L20+8
 271:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 297              		.loc 1 271 24 view .LVU88
 298 0080 0696     		str	r6, [sp, #24]
 270:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 299              		.loc 1 270 24 view .LVU89
 300 0082 CDE90475 		strd	r7, r5, [sp, #16]
 271:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 301              		.loc 1 271 3 is_stmt 1 view .LVU90
 272:Core/Src/main.c **** 
 302              		.loc 1 272 3 view .LVU91
 303 0086 FFF7FEFF 		bl	HAL_GPIO_Init
 304              	.LVL12:
 305              	.LBE30:
 306              	.LBE29:
 142:Core/Src/main.c **** 
 307              		.loc 1 142 3 view .LVU92
 142:Core/Src/main.c **** 
 308              		.loc 1 142 28 is_stmt 0 view .LVU93
 309 008a FFF7FEFF 		bl	HAL_GetTick
 310              	.LVL13:
 144:Core/Src/main.c ****   {
 311              		.loc 1 144 7 view .LVU94
 312 008e 3946     		mov	r1, r7
 142:Core/Src/main.c **** 
 313              		.loc 1 142 28 view .LVU95
 314 0090 0646     		mov	r6, r0
 315              	.LVL14:
 144:Core/Src/main.c ****   {
 316              		.loc 1 144 3 is_stmt 1 view .LVU96
 144:Core/Src/main.c ****   {
 317              		.loc 1 144 7 is_stmt 0 view .LVU97
 318 0092 2D48     		ldr	r0, .L20+8
ARM GAS  /tmp/ccIIVeff.s 			page 14


 319              	.LVL15:
 144:Core/Src/main.c ****   {
 320              		.loc 1 144 7 view .LVU98
 321 0094 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 322              	.LVL16:
 144:Core/Src/main.c ****   {
 323              		.loc 1 144 6 discriminator 1 view .LVU99
 324 0098 0128     		cmp	r0, #1
 325 009a 31D1     		bne	.L9
 146:Core/Src/main.c ****     bootloader_start_output();
 326              		.loc 1 146 5 is_stmt 1 view .LVU100
 327              	.LBB41:
 328              	.LBI41:
 214:Core/Src/main.c **** {
 329              		.loc 1 214 13 view .LVU101
 330              	.LBB42:
 224:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 331              		.loc 1 224 3 view .LVU102
 225:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 332              		.loc 1 225 24 is_stmt 0 view .LVU103
 333 009c 4FF4E133 		mov	r3, #115200
 224:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 334              		.loc 1 224 19 view .LVU104
 335 00a0 2A48     		ldr	r0, .L20+12
 225:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 336              		.loc 1 225 24 view .LVU105
 337 00a2 2B4A     		ldr	r2, .L20+16
 227:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 338              		.loc 1 227 24 view .LVU106
 339 00a4 C0E90255 		strd	r5, r5, [r0, #8]
 225:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 340              		.loc 1 225 24 view .LVU107
 341 00a8 C0E90023 		strd	r2, r3, [r0]
 226:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 342              		.loc 1 226 3 is_stmt 1 view .LVU108
 228:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 343              		.loc 1 228 3 view .LVU109
 229:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 344              		.loc 1 229 20 is_stmt 0 view .LVU110
 345 00ac 0C23     		movs	r3, #12
 228:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 346              		.loc 1 228 22 view .LVU111
 347 00ae 0561     		str	r5, [r0, #16]
 229:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 348              		.loc 1 229 3 is_stmt 1 view .LVU112
 230:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 349              		.loc 1 230 25 is_stmt 0 view .LVU113
 350 00b0 C0E90535 		strd	r3, r5, [r0, #20]
 231:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 351              		.loc 1 231 3 is_stmt 1 view .LVU114
 231:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 352              		.loc 1 231 28 is_stmt 0 view .LVU115
 353 00b4 C561     		str	r5, [r0, #28]
 232:Core/Src/main.c ****   {
 354              		.loc 1 232 3 is_stmt 1 view .LVU116
 232:Core/Src/main.c ****   {
 355              		.loc 1 232 7 is_stmt 0 view .LVU117
ARM GAS  /tmp/ccIIVeff.s 			page 15


 356 00b6 FFF7FEFF 		bl	HAL_UART_Init
 357              	.LVL17:
 232:Core/Src/main.c ****   {
 358              		.loc 1 232 6 discriminator 1 view .LVU118
 359 00ba 08B1     		cbz	r0, .L10
 360              	.LVL18:
 361              	.L19:
 232:Core/Src/main.c ****   {
 362              		.loc 1 232 6 discriminator 1 view .LVU119
 363              	.LBE42:
 364              	.LBE41:
 365              	.LBB43:
 366              	.LBB44:
 317:Core/Src/main.c **** }
 367              		.loc 1 317 3 is_stmt 1 view .LVU120
 368 00bc FFF7FEFF 		bl	Error_Handler
 369              	.LVL19:
 370              	.L10:
 317:Core/Src/main.c **** }
 371              		.loc 1 317 3 is_stmt 0 view .LVU121
 372              	.LBE44:
 373              	.LBE43:
 147:Core/Src/main.c **** 
 374              		.loc 1 147 5 is_stmt 1 view .LVU122
 375 00c0 FFF7FEFF 		bl	bootloader_start_output
 376              	.LVL20:
 377              	.LBB52:
 378              	.LBB53:
 284:Core/Src/main.c ****     return;
 379              		.loc 1 284 22 is_stmt 0 discriminator 1 view .LVU123
 380 00c4 234C     		ldr	r4, .L20+20
 288:Core/Src/main.c **** }
 381              		.loc 1 288 3 view .LVU124
 382 00c6 1F4D     		ldr	r5, .L20+4
 383              	.LVL21:
 384              	.L12:
 288:Core/Src/main.c **** }
 385              		.loc 1 288 3 view .LVU125
 386              	.LBE53:
 387              	.LBE52:
 149:Core/Src/main.c ****     {
 388              		.loc 1 149 5 is_stmt 1 view .LVU126
 151:Core/Src/main.c **** 
 389              		.loc 1 151 7 view .LVU127
 390              	.LBB55:
 391              	.LBI52:
 280:Core/Src/main.c **** {
 392              		.loc 1 280 13 view .LVU128
 393              	.LBB54:
 282:Core/Src/main.c **** 
 394              		.loc 1 282 3 view .LVU129
 284:Core/Src/main.c ****     return;
 395              		.loc 1 284 3 view .LVU130
 284:Core/Src/main.c ****     return;
 396              		.loc 1 284 8 is_stmt 0 view .LVU131
 397 00c8 FFF7FEFF 		bl	HAL_GetTick
 398              	.LVL22:
ARM GAS  /tmp/ccIIVeff.s 			page 16


 284:Core/Src/main.c ****     return;
 399              		.loc 1 284 22 discriminator 1 view .LVU132
 400 00cc 2368     		ldr	r3, [r4]
 401 00ce C01A     		subs	r0, r0, r3
 284:Core/Src/main.c ****     return;
 402              		.loc 1 284 6 discriminator 1 view .LVU133
 403 00d0 B0F5FA7F 		cmp	r0, #500
 404 00d4 07D3     		bcc	.L11
 287:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 405              		.loc 1 287 3 is_stmt 1 view .LVU134
 287:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 406              		.loc 1 287 19 is_stmt 0 view .LVU135
 407 00d6 FFF7FEFF 		bl	HAL_GetTick
 408              	.LVL23:
 288:Core/Src/main.c **** }
 409              		.loc 1 288 3 view .LVU136
 410 00da 4FF40051 		mov	r1, #8192
 287:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 411              		.loc 1 287 17 discriminator 1 view .LVU137
 412 00de 2060     		str	r0, [r4]
 288:Core/Src/main.c **** }
 413              		.loc 1 288 3 is_stmt 1 view .LVU138
 414 00e0 2846     		mov	r0, r5
 415 00e2 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 416              	.LVL24:
 417              	.L11:
 418              	.LBE54:
 419              	.LBE55:
 153:Core/Src/main.c ****         continue;
 420              		.loc 1 153 7 view .LVU139
 153:Core/Src/main.c ****         continue;
 421              		.loc 1 153 12 is_stmt 0 view .LVU140
 422 00e6 FFF7FEFF 		bl	HAL_GetTick
 423              	.LVL25:
 153:Core/Src/main.c ****         continue;
 424              		.loc 1 153 26 discriminator 1 view .LVU141
 425 00ea 801B     		subs	r0, r0, r6
 153:Core/Src/main.c ****         continue;
 426              		.loc 1 153 10 discriminator 1 view .LVU142
 427 00ec 3128     		cmp	r0, #49
 428 00ee EBD9     		bls	.L12
 155:Core/Src/main.c ****         continue;
 429              		.loc 1 155 7 is_stmt 1 view .LVU143
 155:Core/Src/main.c ****         continue;
 430              		.loc 1 155 11 is_stmt 0 view .LVU144
 431 00f0 FFF7FEFF 		bl	bootloader_proccess_input
 432              	.LVL26:
 155:Core/Src/main.c ****         continue;
 433              		.loc 1 155 10 discriminator 1 view .LVU145
 434 00f4 0328     		cmp	r0, #3
 435 00f6 E7D0     		beq	.L12
 158:Core/Src/main.c ****     }
 436              		.loc 1 158 7 is_stmt 1 view .LVU146
 158:Core/Src/main.c ****     }
 437              		.loc 1 158 23 is_stmt 0 view .LVU147
 438 00f8 FFF7FEFF 		bl	HAL_GetTick
 439              	.LVL27:
ARM GAS  /tmp/ccIIVeff.s 			page 17


 440 00fc 0646     		mov	r6, r0
 441              	.LVL28:
 158:Core/Src/main.c ****     }
 442              		.loc 1 158 23 view .LVU148
 443 00fe E3E7     		b	.L12
 444              	.LVL29:
 445              	.L9:
 163:Core/Src/main.c ****   }
 446              		.loc 1 163 5 is_stmt 1 view .LVU149
 447              	.LBB56:
 448              	.LBI43:
 291:Core/Src/main.c **** {
 449              		.loc 1 291 13 view .LVU150
 450              	.LBB51:
 293:Core/Src/main.c ****   if (app_msp != SRAM_END)
 451              		.loc 1 293 3 view .LVU151
 293:Core/Src/main.c ****   if (app_msp != SRAM_END)
 452              		.loc 1 293 12 is_stmt 0 view .LVU152
 453 0100 154E     		ldr	r6, .L20+24
 454              	.LVL30:
 294:Core/Src/main.c ****     Error_Handler();
 455              		.loc 1 294 6 view .LVU153
 456 0102 164B     		ldr	r3, .L20+28
 293:Core/Src/main.c ****   if (app_msp != SRAM_END)
 457              		.loc 1 293 12 view .LVU154
 458 0104 D6F80028 		ldr	r2, [r6, #2048]
 459              	.LVL31:
 294:Core/Src/main.c ****     Error_Handler();
 460              		.loc 1 294 3 is_stmt 1 view .LVU155
 294:Core/Src/main.c ****     Error_Handler();
 461              		.loc 1 294 6 is_stmt 0 view .LVU156
 462 0108 9A42     		cmp	r2, r3
 463 010a D7D1     		bne	.L19
 297:Core/Src/main.c ****   HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 464              		.loc 1 297 3 is_stmt 1 view .LVU157
 465 010c 4146     		mov	r1, r8
 466 010e 0D48     		ldr	r0, .L20+4
 467 0110 FFF7FEFF 		bl	HAL_GPIO_DeInit
 468              	.LVL32:
 298:Core/Src/main.c ****   HAL_DeInit();
 469              		.loc 1 298 3 view .LVU158
 470 0114 3946     		mov	r1, r7
 471 0116 0C48     		ldr	r0, .L20+8
 472 0118 FFF7FEFF 		bl	HAL_GPIO_DeInit
 473              	.LVL33:
 299:Core/Src/main.c **** 
 474              		.loc 1 299 3 view .LVU159
 475 011c FFF7FEFF 		bl	HAL_DeInit
 476              	.LVL34:
 302:Core/Src/main.c ****   __set_MSP(GET_VALUE_FROM_ADDR(APP_START_ADDRESS));
 477              		.loc 1 302 3 view .LVU160
 302:Core/Src/main.c ****   __set_MSP(GET_VALUE_FROM_ADDR(APP_START_ADDRESS));
 478              		.loc 1 302 12 is_stmt 0 view .LVU161
 479 0120 A560     		str	r5, [r4, #8]
 303:Core/Src/main.c ****   // programming manual pg. 99
 480              		.loc 1 303 3 is_stmt 1 view .LVU162
 481 0122 D6F80038 		ldr	r3, [r6, #2048]
ARM GAS  /tmp/ccIIVeff.s 			page 18


 482              	.LVL35:
 483              	.LBB45:
 484              	.LBI45:
 485              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
ARM GAS  /tmp/ccIIVeff.s 			page 19


  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
ARM GAS  /tmp/ccIIVeff.s 			page 20


 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIIVeff.s 			page 21


 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccIIVeff.s 			page 22


 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIIVeff.s 			page 23


 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 486              		.loc 2 331 27 view .LVU163
 487              	.LBB46:
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 488              		.loc 2 333 3 view .LVU164
 489              		.syntax unified
 490              	@ 333 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccIIVeff.s 			page 24


 491 0126 83F30888 		MSR msp, r3
 492              	@ 0 "" 2
 493              	.LVL36:
 494              		.loc 2 333 3 is_stmt 0 view .LVU165
 495              		.thumb
 496              		.syntax unified
 497              	.LBE46:
 498              	.LBE45:
 305:Core/Src/main.c ****   SCB->VTOR = APP_START_ADDRESS;
 499              		.loc 1 305 3 is_stmt 1 view .LVU166
 500              	.LBB47:
 501              	.LBI47:
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
ARM GAS  /tmp/ccIIVeff.s 			page 25


 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
ARM GAS  /tmp/ccIIVeff.s 			page 26


 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIIVeff.s 			page 27


 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccIIVeff.s 			page 28


 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccIIVeff.s 			page 29


 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccIIVeff.s 			page 30


 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/ccIIVeff.s 			page 31


 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIIVeff.s 			page 32


 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /tmp/ccIIVeff.s 			page 33


 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 502              		.loc 2 888 27 view .LVU167
 503              	.LBB48:
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIIVeff.s 			page 34


 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 504              		.loc 2 890 3 view .LVU168
 505              		.syntax unified
 506              	@ 890 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 507 012a BFF35F8F 		dmb 0xF
 508              	@ 0 "" 2
 509              		.thumb
 510              		.syntax unified
 511              	.LBE48:
 512              	.LBE47:
 306:Core/Src/main.c ****   // programming manual pg. 100
 513              		.loc 1 306 3 view .LVU169
 306:Core/Src/main.c ****   // programming manual pg. 100
 514              		.loc 1 306 13 is_stmt 0 view .LVU170
 515 012e 0C4B     		ldr	r3, .L20+32
 516 0130 0C4A     		ldr	r2, .L20+36
 517 0132 9A60     		str	r2, [r3, #8]
 308:Core/Src/main.c **** 
 518              		.loc 1 308 3 is_stmt 1 view .LVU171
 519              	.LBB49:
 520              	.LBI49:
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 521              		.loc 2 877 27 view .LVU172
 522              	.LBB50:
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 523              		.loc 2 879 3 view .LVU173
 524              		.syntax unified
 525              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 526 0134 BFF34F8F 		dsb 0xF
 527              	@ 0 "" 2
 528              		.thumb
 529              		.syntax unified
 530              	.LBE50:
 531              	.LBE49:
 310:Core/Src/main.c ****     APP_START_ADDRESS + sizeof(uint32_t)
 532              		.loc 1 310 3 view .LVU174
 310:Core/Src/main.c ****     APP_START_ADDRESS + sizeof(uint32_t)
 533              		.loc 1 310 12 is_stmt 0 view .LVU175
 534 0138 D6F80438 		ldr	r3, [r6, #2052]
 535              	.LVL37:
 313:Core/Src/main.c ****   reset_handler();
 536              		.loc 1 313 3 is_stmt 1 view .LVU176
 314:Core/Src/main.c **** 
 537              		.loc 1 314 3 view .LVU177
 538 013c 9847     		blx	r3
 539              	.LVL38:
 314:Core/Src/main.c **** 
 540              		.loc 1 314 3 is_stmt 0 view .LVU178
 541 013e BDE7     		b	.L19
 542              	.L21:
 543              		.align	2
 544              	.L20:
 545 0140 00100240 		.word	1073876992
 546 0144 00100140 		.word	1073811456
 547 0148 000C0140 		.word	1073810432
 548 014c 00000000 		.word	huart1
 549 0150 00380140 		.word	1073821696
ARM GAS  /tmp/ccIIVeff.s 			page 35


 550 0154 00000000 		.word	current_ticks.0
 551 0158 00200008 		.word	134225920
 552 015c 00500020 		.word	536891392
 553 0160 00ED00E0 		.word	-536810240
 554 0164 00280008 		.word	134227968
 555              	.LBE51:
 556              	.LBE56:
 557              		.cfi_endproc
 558              	.LFE68:
 560              		.section	.text._bootloader_start,"ax",%progbits
 561              		.align	1
 562              		.weak	_bootloader_start
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 567              	_bootloader_start:
 568              	.LFB67:
 104:Core/Src/main.c ****     __initialize_data(&_sidata, &_sdata, &_edata);
 569              		.loc 1 104 1 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ Volatile: function does not return.
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 105:Core/Src/main.c ****     __initialize_bss(&_sbss, &_ebss);
 574              		.loc 1 105 5 view .LVU180
 575              	.LVL39:
 576              	.LBB57:
 577              	.LBI57:
  82:Core/Src/main.c ****     uint32_t* flash_begin,
 578              		.loc 1 82 20 view .LVU181
 579              	.LBB58:
  87:Core/Src/main.c ****     while (p < data_end)
 580              		.loc 1 87 5 view .LVU182
  88:Core/Src/main.c ****         *p++ = *flash_begin++;
 581              		.loc 1 88 5 view .LVU183
 582              	.LBE58:
 583              	.LBE57:
 104:Core/Src/main.c ****     __initialize_data(&_sidata, &_sdata, &_edata);
 584              		.loc 1 104 1 is_stmt 0 view .LVU184
 585 0000 08B5     		push	{r3, lr}
 586              	.LCFI6:
 587              		.cfi_def_cfa_offset 8
 588              		.cfi_offset 3, -8
 589              		.cfi_offset 14, -4
 590              	.LBB60:
 591              	.LBB59:
  89:Core/Src/main.c **** }
 592              		.loc 1 89 14 view .LVU185
 593 0002 0E4B     		ldr	r3, .L23
 594 0004 0E48     		ldr	r0, .L23+4
 595 0006 DA1C     		adds	r2, r3, #3
 596 0008 121A     		subs	r2, r2, r0
 597 000a C11E     		subs	r1, r0, #3
 598 000c 22F00302 		bic	r2, r2, #3
 599 0010 9942     		cmp	r1, r3
 600 0012 88BF     		it	hi
 601 0014 0022     		movhi	r2, #0
ARM GAS  /tmp/ccIIVeff.s 			page 36


 602 0016 0B49     		ldr	r1, .L23+8
 603 0018 FFF7FEFF 		bl	memcpy
 604              	.LVL40:
  89:Core/Src/main.c **** }
 605              		.loc 1 89 14 view .LVU186
 606              	.LBE59:
 607              	.LBE60:
 608              	.LBB61:
 609              	.LBB62:
  99:Core/Src/main.c **** }
 610              		.loc 1 99 14 view .LVU187
 611 001c 0A4B     		ldr	r3, .L23+12
 612 001e 0B48     		ldr	r0, .L23+16
 613 0020 DA1C     		adds	r2, r3, #3
 614 0022 121A     		subs	r2, r2, r0
 615 0024 C11E     		subs	r1, r0, #3
 616 0026 22F00302 		bic	r2, r2, #3
 617 002a 9942     		cmp	r1, r3
 618 002c 88BF     		it	hi
 619 002e 0022     		movhi	r2, #0
 620 0030 0021     		movs	r1, #0
 621 0032 FFF7FEFF 		bl	memset
 622              	.LVL41:
  99:Core/Src/main.c **** }
 623              		.loc 1 99 14 view .LVU188
 624              	.LBE62:
 625              	.LBE61:
 107:Core/Src/main.c **** 
 626              		.loc 1 107 5 is_stmt 1 view .LVU189
 627 0036 FFF7FEFF 		bl	main
 628              	.LVL42:
 629              	.L24:
 630 003a 00BF     		.align	2
 631              	.L23:
 632 003c 00000000 		.word	_edata
 633 0040 00000000 		.word	_sdata
 634 0044 00000000 		.word	_sidata
 635 0048 00000000 		.word	_ebss
 636 004c 00000000 		.word	_sbss
 637              		.cfi_endproc
 638              	.LFE67:
 640              		.section	.data.current_ticks.0,"aw"
 641              		.align	2
 644              	current_ticks.0:
 645 0000 F4010000 		.word	500
 646              		.global	vector_table
 647              		.section	.isr_vector,"aw"
 648              		.align	2
 651              	vector_table:
 652 0000 00500020 		.word	536891392
 653 0004 00000000 		.word	_bootloader_start
 654 0008 00000000 		.word	0
 655 000c 00000000 		.word	0
 656 0010 00000000 		.word	0
 657 0014 00000000 		.word	0
 658 0018 00000000 		.word	0
 659 001c 00000000 		.word	0
ARM GAS  /tmp/ccIIVeff.s 			page 37


 660 0020 00000000 		.word	0
 661 0024 00000000 		.word	0
 662 0028 00000000 		.word	0
 663 002c 00000000 		.word	0
 664 0030 00000000 		.word	0
 665 0034 00000000 		.word	0
 666 0038 00000000 		.word	0
 667 003c 00000000 		.word	SysTick_Handler
 668              		.global	bootloader_uart
 669              		.section	.data.bootloader_uart,"aw"
 670              		.align	2
 673              	bootloader_uart:
 674 0000 00000000 		.word	huart1
 675              		.global	huart1
 676              		.section	.bss.huart1,"aw",%nobits
 677              		.align	2
 680              	huart1:
 681 0000 00000000 		.space	72
 681      00000000 
 681      00000000 
 681      00000000 
 681      00000000 
 682              		.text
 683              	.Letext0:
 684              		.file 3 "/usr/local/src/arm-gnu-toolchain-13.2/arm-none-eabi/include/machine/_default_types.h"
 685              		.file 4 "/usr/local/src/arm-gnu-toolchain-13.2/arm-none-eabi/include/sys/_stdint.h"
 686              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 687              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 688              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 689              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 690              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 691              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 692              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 693              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 694              		.file 13 "External/bootloader/Inc/bootloader_defs.h"
 695              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 696              		.file 15 "External/bootloader/Inc/bootloader_cmd.h"
 697              		.file 16 "<built-in>"
ARM GAS  /tmp/ccIIVeff.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccIIVeff.s:19     .text.Error_Handler:00000000 $t
     /tmp/ccIIVeff.s:25     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccIIVeff.s:55     .text.Error_Handler:00000018 $d
     /tmp/ccIIVeff.s:60     .text.SystemClock_Config:00000000 $t
     /tmp/ccIIVeff.s:66     .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccIIVeff.s:150    .text.startup.main:00000000 $t
     /tmp/ccIIVeff.s:156    .text.startup.main:00000000 main
     /tmp/ccIIVeff.s:545    .text.startup.main:00000140 $d
     /tmp/ccIIVeff.s:680    .bss.huart1:00000000 huart1
     /tmp/ccIIVeff.s:644    .data.current_ticks.0:00000000 current_ticks.0
     /tmp/ccIIVeff.s:561    .text._bootloader_start:00000000 $t
     /tmp/ccIIVeff.s:567    .text._bootloader_start:00000000 _bootloader_start
     /tmp/ccIIVeff.s:632    .text._bootloader_start:0000003c $d
     /tmp/ccIIVeff.s:641    .data.current_ticks.0:00000000 $d
     /tmp/ccIIVeff.s:651    .isr_vector:00000000 vector_table
     /tmp/ccIIVeff.s:648    .isr_vector:00000000 $d
     /tmp/ccIIVeff.s:673    .data.bootloader_uart:00000000 bootloader_uart
     /tmp/ccIIVeff.s:670    .data.bootloader_uart:00000000 $d
     /tmp/ccIIVeff.s:677    .bss.huart1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GetTick
HAL_GPIO_ReadPin
HAL_UART_Init
bootloader_start_output
bootloader_proccess_input
HAL_GPIO_DeInit
HAL_DeInit
memcpy
_edata
_sdata
_sidata
_ebss
_sbss
SysTick_Handler
